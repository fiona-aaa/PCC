$date
   Tue Aug 23 21:57:02 2022
$end
$version
  2018.3
$end
$timescale
  1ps
$end
$scope module top_tb $end
$var reg 1 ! clk_in $end
$var reg 1 " reset $end
$var wire 1 # clk $end
$var wire 32 $ pc [31:0] $end
$var wire 32 % inst [31:0] $end
$var wire 1 & IM_R $end
$var wire 1 ' DM_CS $end
$var wire 1 ( DM_R $end
$var wire 1 ) DM_W $end
$var wire 32 * alu_r [31:0] $end
$var wire 1 + addr $end
$var wire 1 , rdata $end
$var wire 1 - wdata $end
$scope module uut $end
$var wire 1 . clk_in $end
$var wire 1 / reset $end
$var wire 1 # clk $end
$var wire 32 $ pc [31:0] $end
$var wire 32 % inst [31:0] $end
$var wire 32 0 addr [31:0] $end
$var wire 32 1 rdata [31:0] $end
$var wire 32 2 wdata [31:0] $end
$var wire 1 & IM_R $end
$var wire 1 ' DM_CS $end
$var wire 1 ( DM_R $end
$var wire 1 ) DM_W $end
$var wire 32 * alu_r [31:0] $end
$scope module sccpu $end
$var wire 1 . clk $end
$var wire 32 % inst [31:0] $end
$var wire 1 / reset $end
$var wire 32 1 mrdata [31:0] $end
$var wire 32 $ pc_out [31:0] $end
$var wire 32 0 maddr [31:0] $end
$var wire 32 2 mwdata [31:0] $end
$var wire 1 & IM_R $end
$var wire 1 ' DM_CS $end
$var wire 1 ( DM_R $end
$var wire 1 ) DM_W $end
$var wire 32 * alu_r [31:0] $end
$var wire 1 3 RF_W $end
$var wire 1 4 M1 $end
$var wire 1 5 M2 $end
$var wire 1 6 M3 $end
$var wire 1 7 M4 $end
$var wire 1 8 M5 $end
$var wire 1 9 M6 $end
$var wire 1 : sign_ext $end
$var wire 1 ; zero $end
$var wire 3 < ALUC [2:0] $end
$var wire 32 = mux1_out [31:0] $end
$var wire 32 > mux2_out [31:0] $end
$var wire 32 ? mux3_out [31:0] $end
$var wire 32 @ mux4_out [31:0] $end
$var wire 32 A mux5_out [31:0] $end
$var wire 32 B alu_out [31:0] $end
$var wire 32 C rf_rdata1 [31:0] $end
$var wire 32 D rf_rdata2 [31:0] $end
$var wire 32 E ext5_out [31:0] $end
$var wire 32 F ext16_out [31:0] $end
$var wire 32 G ext18_out [31:0] $end
$var wire 32 H npc_out [31:0] $end
$var wire 32 I join_out [31:0] $end
$var wire 28 J temp1 [27:0] $end
$var wire 28 K temp2 [27:0] $end
$var wire 5 L mux6_out [4:0] $end
$scope module cpu_decoder $end
$var wire 32 % inst [31:0] $end
$var wire 1 . clk $end
$var wire 1 ; zero $end
$var wire 1 & IM_R $end
$var wire 1 6 M3 $end
$var wire 1 7 M4 $end
$var wire 3 < ALUC [2:0] $end
$var wire 1 5 M2 $end
$var wire 1 3 RF_W $end
$var wire 1 8 M5 $end
$var wire 1 4 M1 $end
$var wire 1 ' DM_CS $end
$var wire 1 ( DM_R $end
$var wire 1 ) DM_W $end
$var wire 1 9 M6 $end
$var wire 1 : sign_ext $end
$var wire 6 M func [5:0] $end
$var wire 6 N op [5:0] $end
$var wire 1 O r_type $end
$var wire 1 P addu $end
$var wire 1 Q subu $end
$var wire 1 R ori $end
$var wire 1 S sll $end
$var wire 1 T lw $end
$var wire 1 U sw $end
$var wire 1 V beq $end
$var wire 1 W j_i $end
$var wire 1 X DM_2 $end
$upscope $end
$scope module cpu_pc $end
$var wire 1 . clk $end
$var wire 1 / rst $end
$var wire 32 = data_in [31:0] $end
$var reg 32 Y data_out [31:0] $end
$upscope $end
$scope module cpu_npc $end
$var wire 32 $ pc_in [31:0] $end
$var wire 32 H pc_out [31:0] $end
$upscope $end
$scope module cpu_join $end
$var wire 28 J a [27:0] $end
$var wire 4 Z b [3:0] $end
$var wire 32 I s [31:0] $end
$upscope $end
$scope module cpu_regfile $end
$var wire 1 . clk $end
$var wire 1 / rst $end
$var wire 1 3 we $end
$var wire 5 [ raddr1 [4:0] $end
$var wire 5 \ raddr2 [4:0] $end
$var wire 5 L waddr [4:0] $end
$var wire 32 > wdata [31:0] $end
$var wire 32 C rdata1 [31:0] $end
$var wire 32 D rdata2 [31:0] $end
$var integer 32 ] i $end
$upscope $end
$scope module cpu_alu $end
$var wire 32 ? a [31:0] $end
$var wire 32 @ b [31:0] $end
$var wire 3 < aluc [2:0] $end
$var wire 32 B r [31:0] $end
$var wire 1 ; zero $end
$var reg 32 ^ r_1 [31:0] $end
$upscope $end
$scope module cpu_ext5 $end
$var wire 5 _ a [4:0] $end
$var reg 32 ` b [31:0] $end
$var parameter 32 a DEPTH [31:0] $end
$upscope $end
$scope module cpu_ext16 $end
$var wire 16 b a [15:0] $end
$var wire 1 : sign_ext $end
$var reg 32 c b [31:0] $end
$var parameter 32 d DEPTH [31:0] $end
$upscope $end
$scope module cpu_ext18 $end
$var wire 18 e a [17:0] $end
$var reg 32 f b [31:0] $end
$var parameter 32 g DEPTH [31:0] $end
$upscope $end
$scope module mux1 $end
$var wire 32 I a [31:0] $end
$var wire 32 A b [31:0] $end
$var wire 1 4 select $end
$var reg 32 h r [31:0] $end
$var parameter 32 i WIDTH [31:0] $end
$upscope $end
$scope module mux2 $end
$var wire 32 1 a [31:0] $end
$var wire 32 B b [31:0] $end
$var wire 1 5 select $end
$var reg 32 j r [31:0] $end
$var parameter 32 k WIDTH [31:0] $end
$upscope $end
$scope module mux3 $end
$var wire 32 E a [31:0] $end
$var wire 32 C b [31:0] $end
$var wire 1 6 select $end
$var reg 32 l r [31:0] $end
$var parameter 32 m WIDTH [31:0] $end
$upscope $end
$scope module mux4 $end
$var wire 32 D a [31:0] $end
$var wire 32 F b [31:0] $end
$var wire 1 7 select $end
$var reg 32 n r [31:0] $end
$var parameter 32 o WIDTH [31:0] $end
$upscope $end
$scope module mux5 $end
$var wire 32 H a [31:0] $end
$var wire 32 p b [31:0] $end
$var wire 1 8 select $end
$var reg 32 q r [31:0] $end
$var parameter 32 r WIDTH [31:0] $end
$upscope $end
$upscope $end
$scope module imemory $end
$var wire 32 $ a [31:0] $end
$var wire 1 & IM_R $end
$var wire 32 % rd [31:0] $end
$upscope $end
$scope module scdmem $end
$var wire 1 . clk $end
$var wire 1 / reset $end
$var wire 1 ' CS $end
$var wire 1 ) DM_W $end
$var wire 1 ( DM_R $end
$var wire 32 0 addr [31:0] $end
$var wire 32 2 wdata [31:0] $end
$var wire 32 1 rdata [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
1"
0#
b0 $
b0 %
1&
0'
0(
0)
b0 *
0+
0,
0-
0.
1/
b0 0
b0 1
b0 2
13
14
15
06
07
08
09
0:
1;
b11 <
b100 =
b0 >
b0 ?
b0 @
b100 A
b0 B
b0 C
b0 D
b0 E
b0 F
b0 G
b100 H
b0 I
b0 J
b0 K
b0 L
b0 M
b0 N
1O
0P
0Q
0R
1S
0T
0U
0V
0W
0X
b0 Y
b0 Z
b0 [
b0 \
b100000 ]
b0 ^
b0 _
b0 `
b101 a
b0 b
b0 c
b10000 d
b0 e
b0 f
b10010 g
b100 h
b100000 i
b0 j
b100000 k
b0 l
b100000 m
b0 n
b100000 o
b100 p
b100 q
b100000 r
$end
#50000
0"
0/
#100000
1!
1#
b100 $
b1000000100001 %
1.
14
15
16
b0 <
b1000 =
b1000 A
b1000000100001 F
b100000010000100 G
b1000 H
b100000010000100 I
b100000010000100 J
b100000010000100 K
b10 L
b100001 M
1P
0Q
0S
b100 Y
b0 Z
b0 [
b0 \
b0 ^
b0 _
b1000000100001 b
b1000000100001 c
b100000010000100 e
b100000010000100 f
b1000 h
b0 l
b0 n
b100000010001100 p
b1000 q
#200000
0!
0#
0.
#300000
1!
1#
b1000 $
b10000010001100000100001 %
1.
b1100 =
b1100 A
b0 C
b0 D
b1100000100001 F
b110000010000100 G
b1100 H
b1000001000110000010000100 I
b1000001000110000010000100 J
b110000010000100 K
b11 L
b1000 Y
b0 Z
b10 [
b1 \
b0 _
b1100000100001 b
b1100000100001 c
b110000010000100 e
b110000010000100 f
b1100 h
b0 n
b110000010010000 p
b1100 q
#400000
0!
0#
0.
#500000
1!
1#
b1100 $
b110110001100000000000000000010 %
b10 *
0+
0,
1.
b10 0
14
15
16
17
08
19
0;
b10 <
b10000 =
b10 >
b10 @
b10000 A
b10 B
b0 C
b0 D
b10 F
b1000 G
b10000 H
b1000110000000000000000001000 I
b1000110000000000000000001000 J
b1000 K
b10000 L
b10 M
b1101 N
0O
0P
0Q
1R
0S
0T
0U
0V
0W
b1100 Y
b0 Z
b10001 [
b10000 \
b10 ^
b0 _
b10 b
b10 c
b1000 e
b1000 f
b10000 h
b10 j
b10 n
b11000 p
b10000 q
#600000
0!
0#
0.
#700000
1!
1#
b10000 $
b10001110000101000000000000000011 %
1'
1(
b101 *
1+
x,
0-
1.
b101 0
bx 1
b0 2
14
05
16
17
19
1:
0;
b0 <
b10100 =
bx >
b10 ?
b11 @
b10100 A
b101 B
b10 C
b0 D
b11 F
b1100 G
b10100 H
b1000010100000000000000001100 I
b1000010100000000000000001100 J
b1100 K
b10100 L
b11 M
b100011 N
0O
0P
0Q
0R
0S
1T
0U
0V
0W
b10000 Y
b0 Z
b10000 [
b10100 \
b101 ^
b0 _
b11 b
b11 c
b1100 e
b1100 f
b10100 h
bx j
b10 l
b11 n
b100000 p
b10100 q
#800000
0!
0#
0.
#900000
1!
1#
b10100 $
b10101110000101000000000000000100 %
1'
0(
1)
b110 *
0+
0,
x-
1.
b110 0
b0 1
bx 2
03
14
15
16
17
09
1:
0;
b11000 =
b110 >
b100 @
b11000 A
b110 B
b10 C
bx D
b100 F
b10000 G
b11000 H
b1000010100000000000000010000 I
b1000010100000000000000010000 J
b10000 K
b0 L
b100 M
b101011 N
0O
0P
0Q
0R
0S
0T
1U
0V
0W
1X
b10100 Y
b0 Z
b10000 [
b10100 \
b110 ^
b0 _
b100 b
b100 c
b10000 e
b10000 f
b11000 h
b110 j
b100 n
b101000 p
b11000 q
#1000000
0!
0#
0.
